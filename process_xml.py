#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Thu Jul 26 15:02:13 2018 by generateDS.py version 2.29.17.
# Python 3.6.4 |Anaconda, Inc.| (default, Jan 16 2018, 10:22:32) [MSC v.1900 64 bit (AMD64)]
#
# Command line options:
#   ('-f', '')
#   ('--super', 'testluc')
#   ('-o', 'testluc.py')
#   ('-s', 'testluc_sub.py')
#   ('--member-specs', 'list')
#
# Command line arguments:
#   datastage.xsd
#
# Command line:
#   C:\LUC\Python\generateDS-2.29.17\generateDS.py -f --super="testluc" -o "testluc.py" -s "testluc_sub.py" --member-specs="list" datastage.xsd
#
# Current working directory (os.getcwd()):
#   generateDS-2.29.17
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = ''
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class DSExport(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('Header', 'Header', 0, 0, {'ref': 'Header', 'name': 'Header', 'type': 'Header'}, None),
        MemberSpec_('Job', 'Job', 1, 0, {'maxOccurs': 'unbounded', 'ref': 'Job', 'name': 'Job', 'type': 'Job'}, None),
        MemberSpec_('StageTypes', 'StageTypes', 0, 0, {'ref': 'StageTypes', 'name': 'StageTypes', 'type': 'StageTypes'}, None),
        MemberSpec_('TableDefinitions', 'TableDefinitions', 0, 0, {'ref': 'TableDefinitions', 'name': 'TableDefinitions', 'type': 'TableDefinitions'}, None),
        MemberSpec_('ParameterSets', 'ParameterSets', 0, 0, {'ref': 'ParameterSets', 'name': 'ParameterSets', 'type': 'ParameterSets'}, None),
    ]
    subclass = None
    superclass = None
    def __init__(self, Header=None, Job=None, StageTypes=None, TableDefinitions=None, ParameterSets=None):
        self.original_tagname_ = None
        self.Header = Header
        if Job is None:
            self.Job = []
        else:
            self.Job = Job
        self.StageTypes = StageTypes
        self.TableDefinitions = TableDefinitions
        self.ParameterSets = ParameterSets
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DSExport)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DSExport.subclass:
            return DSExport.subclass(*args_, **kwargs_)
        else:
            return DSExport(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Header(self): return self.Header
    def set_Header(self, Header): self.Header = Header
    def get_Job(self): return self.Job
    def set_Job(self, Job): self.Job = Job
    def add_Job(self, value): self.Job.append(value)
    def insert_Job_at(self, index, value): self.Job.insert(index, value)
    def replace_Job_at(self, index, value): self.Job[index] = value
    def get_StageTypes(self): return self.StageTypes
    def set_StageTypes(self, StageTypes): self.StageTypes = StageTypes
    def get_TableDefinitions(self): return self.TableDefinitions
    def set_TableDefinitions(self, TableDefinitions): self.TableDefinitions = TableDefinitions
    def get_ParameterSets(self): return self.ParameterSets
    def set_ParameterSets(self, ParameterSets): self.ParameterSets = ParameterSets
    def hasContent_(self):
        if (
            self.Header is not None or
            self.Job or
            self.StageTypes is not None or
            self.TableDefinitions is not None or
            self.ParameterSets is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DSExport', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DSExport')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DSExport')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DSExport', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DSExport'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DSExport', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Header is not None:
            self.Header.export(outfile, level, namespace_, name_='Header', pretty_print=pretty_print)
        for Job_ in self.Job:
            Job_.export(outfile, level, namespace_, name_='Job', pretty_print=pretty_print)
        if self.StageTypes is not None:
            self.StageTypes.export(outfile, level, namespace_, name_='StageTypes', pretty_print=pretty_print)
        if self.TableDefinitions is not None:
            self.TableDefinitions.export(outfile, level, namespace_, name_='TableDefinitions', pretty_print=pretty_print)
        if self.ParameterSets is not None:
            self.ParameterSets.export(outfile, level, namespace_, name_='ParameterSets', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Header':
            obj_ = Header.factory()
            obj_.build(child_)
            self.Header = obj_
            obj_.original_tagname_ = 'Header'
        elif nodeName_ == 'Job':
            obj_ = Job.factory()
            obj_.build(child_)
            self.Job.append(obj_)
            obj_.original_tagname_ = 'Job'
        elif nodeName_ == 'StageTypes':
            obj_ = StageTypes.factory()
            obj_.build(child_)
            self.StageTypes = obj_
            obj_.original_tagname_ = 'StageTypes'
        elif nodeName_ == 'TableDefinitions':
            obj_ = TableDefinitions.factory()
            obj_.build(child_)
            self.TableDefinitions = obj_
            obj_.original_tagname_ = 'TableDefinitions'
        elif nodeName_ == 'ParameterSets':
            obj_ = ParameterSets.factory()
            obj_.build(child_)
            self.ParameterSets = obj_
            obj_.original_tagname_ = 'ParameterSets'
# end class DSExport


class Header(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('CharacterSet', 'xs:NCName', 0, 0, {'use': 'required'}),
        MemberSpec_('Date', 'xs:date', 0, 0, {'use': 'required'}),
        MemberSpec_('ExportingTool', 'xs:string', 0, 0, {'use': 'required'}),
        MemberSpec_('ServerName', 'xs:NMTOKEN', 0, 0, {'use': 'required'}),
        MemberSpec_('ServerVersion', 'xs:decimal', 0, 0, {'use': 'required'}),
        MemberSpec_('Time', 'xs:NMTOKEN', 0, 0, {'use': 'required'}),
        MemberSpec_('ToolInstanceID', 'xs:NCName', 0, 0, {'use': 'required'}),
        MemberSpec_('ToolVersion', 'xs:integer', 0, 0, {'use': 'required'}),
    ]
    subclass = None
    superclass = None
    def __init__(self, CharacterSet=None, Date=None, ExportingTool=None, ServerName=None, ServerVersion=None, Time=None, ToolInstanceID=None, ToolVersion=None):
        self.original_tagname_ = None
        self.CharacterSet = _cast(None, CharacterSet)
        if isinstance(Date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Date, '%Y-%m-%d').date()
        else:
            initvalue_ = Date
        self.Date = initvalue_
        self.ExportingTool = _cast(None, ExportingTool)
        self.ServerName = _cast(None, ServerName)
        self.ServerVersion = _cast(float, ServerVersion)
        self.Time = _cast(None, Time)
        self.ToolInstanceID = _cast(None, ToolInstanceID)
        self.ToolVersion = _cast(int, ToolVersion)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Header)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Header.subclass:
            return Header.subclass(*args_, **kwargs_)
        else:
            return Header(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CharacterSet(self): return self.CharacterSet
    def set_CharacterSet(self, CharacterSet): self.CharacterSet = CharacterSet
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def get_ExportingTool(self): return self.ExportingTool
    def set_ExportingTool(self, ExportingTool): self.ExportingTool = ExportingTool
    def get_ServerName(self): return self.ServerName
    def set_ServerName(self, ServerName): self.ServerName = ServerName
    def get_ServerVersion(self): return self.ServerVersion
    def set_ServerVersion(self, ServerVersion): self.ServerVersion = ServerVersion
    def get_Time(self): return self.Time
    def set_Time(self, Time): self.Time = Time
    def get_ToolInstanceID(self): return self.ToolInstanceID
    def set_ToolInstanceID(self, ToolInstanceID): self.ToolInstanceID = ToolInstanceID
    def get_ToolVersion(self): return self.ToolVersion
    def set_ToolVersion(self, ToolVersion): self.ToolVersion = ToolVersion
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Header', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Header')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Header')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='Header', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Header'):
        if self.CharacterSet is not None and 'CharacterSet' not in already_processed:
            already_processed.add('CharacterSet')
            outfile.write(' CharacterSet=%s' % (quote_attrib(self.CharacterSet), ))
        if self.Date is not None and 'Date' not in already_processed:
            already_processed.add('Date')
            outfile.write(' Date="%s"' % self.gds_format_date(self.Date, input_name='Date'))
        if self.ExportingTool is not None and 'ExportingTool' not in already_processed:
            already_processed.add('ExportingTool')
            outfile.write(' ExportingTool=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ExportingTool), input_name='ExportingTool')), ))
        if self.ServerName is not None and 'ServerName' not in already_processed:
            already_processed.add('ServerName')
            outfile.write(' ServerName=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ServerName), input_name='ServerName')), ))
        if self.ServerVersion is not None and 'ServerVersion' not in already_processed:
            already_processed.add('ServerVersion')
            outfile.write(' ServerVersion="%s"' % self.gds_format_float(self.ServerVersion, input_name='ServerVersion'))
        if self.Time is not None and 'Time' not in already_processed:
            already_processed.add('Time')
            outfile.write(' Time=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Time), input_name='Time')), ))
        if self.ToolInstanceID is not None and 'ToolInstanceID' not in already_processed:
            already_processed.add('ToolInstanceID')
            outfile.write(' ToolInstanceID=%s' % (quote_attrib(self.ToolInstanceID), ))
        if self.ToolVersion is not None and 'ToolVersion' not in already_processed:
            already_processed.add('ToolVersion')
            outfile.write(' ToolVersion="%s"' % self.gds_format_integer(self.ToolVersion, input_name='ToolVersion'))
    def exportChildren(self, outfile, level, namespace_='', name_='Header', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('CharacterSet', node)
        if value is not None and 'CharacterSet' not in already_processed:
            already_processed.add('CharacterSet')
            self.CharacterSet = value
        value = find_attr_value_('Date', node)
        if value is not None and 'Date' not in already_processed:
            already_processed.add('Date')
            try:
                self.Date = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (Date): %s' % exp)
        value = find_attr_value_('ExportingTool', node)
        if value is not None and 'ExportingTool' not in already_processed:
            already_processed.add('ExportingTool')
            self.ExportingTool = value
        value = find_attr_value_('ServerName', node)
        if value is not None and 'ServerName' not in already_processed:
            already_processed.add('ServerName')
            self.ServerName = value
        value = find_attr_value_('ServerVersion', node)
        if value is not None and 'ServerVersion' not in already_processed:
            already_processed.add('ServerVersion')
            try:
                self.ServerVersion = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (ServerVersion): %s' % exp)
        value = find_attr_value_('Time', node)
        if value is not None and 'Time' not in already_processed:
            already_processed.add('Time')
            self.Time = value
        value = find_attr_value_('ToolInstanceID', node)
        if value is not None and 'ToolInstanceID' not in already_processed:
            already_processed.add('ToolInstanceID')
            self.ToolInstanceID = value
        value = find_attr_value_('ToolVersion', node)
        if value is not None and 'ToolVersion' not in already_processed:
            already_processed.add('ToolVersion')
            try:
                self.ToolVersion = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class Header


class Job(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('DateModified', 'xs:date', 0, 0, {'use': 'required'}),
        MemberSpec_('Identifier', 'xs:NCName', 0, 0, {'use': 'required'}),
        MemberSpec_('TimeModified', 'xs:NMTOKEN', 0, 0, {'use': 'required'}),
        MemberSpec_('Record', 'Record', 1, 0, {'maxOccurs': 'unbounded', 'ref': 'Record', 'name': 'Record', 'type': 'Record'}, None),
    ]
    subclass = None
    superclass = None
    def __init__(self, DateModified=None, Identifier=None, TimeModified=None, Record=None):
        self.original_tagname_ = None
        if isinstance(DateModified, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DateModified, '%Y-%m-%d').date()
        else:
            initvalue_ = DateModified
        self.DateModified = initvalue_
        self.Identifier = _cast(None, Identifier)
        self.TimeModified = _cast(None, TimeModified)
        if Record is None:
            self.Record = []
        else:
            self.Record = Record
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Job)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Job.subclass:
            return Job.subclass(*args_, **kwargs_)
        else:
            return Job(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Record(self): return self.Record
    def set_Record(self, Record): self.Record = Record
    def add_Record(self, value): self.Record.append(value)
    def insert_Record_at(self, index, value): self.Record.insert(index, value)
    def replace_Record_at(self, index, value): self.Record[index] = value
    def get_DateModified(self): return self.DateModified
    def set_DateModified(self, DateModified): self.DateModified = DateModified
    def get_Identifier(self): return self.Identifier
    def set_Identifier(self, Identifier): self.Identifier = Identifier
    def get_TimeModified(self): return self.TimeModified
    def set_TimeModified(self, TimeModified): self.TimeModified = TimeModified
    def hasContent_(self):
        if (
            self.Record
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Job', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Job')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Job')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='Job', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Job'):
        if self.DateModified is not None and 'DateModified' not in already_processed:
            already_processed.add('DateModified')
            outfile.write(' DateModified="%s"' % self.gds_format_date(self.DateModified, input_name='DateModified'))
        if self.Identifier is not None and 'Identifier' not in already_processed:
            already_processed.add('Identifier')
            outfile.write(' Identifier=%s' % (quote_attrib(self.Identifier), ))
        if self.TimeModified is not None and 'TimeModified' not in already_processed:
            already_processed.add('TimeModified')
            outfile.write(' TimeModified=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.TimeModified), input_name='TimeModified')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='Job', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Record_ in self.Record:
            Record_.export(outfile, level, namespace_, name_='Record', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('DateModified', node)
        if value is not None and 'DateModified' not in already_processed:
            already_processed.add('DateModified')
            try:
                self.DateModified = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (DateModified): %s' % exp)
        value = find_attr_value_('Identifier', node)
        if value is not None and 'Identifier' not in already_processed:
            already_processed.add('Identifier')
            self.Identifier = value
        value = find_attr_value_('TimeModified', node)
        if value is not None and 'TimeModified' not in already_processed:
            already_processed.add('TimeModified')
            self.TimeModified = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Record':
            obj_ = Record.factory()
            obj_.build(child_)
            self.Record.append(obj_)
            obj_.original_tagname_ = 'Record'
# end class Job


class StageTypes(GeneratedsSuper):
    member_data_items_ = [
    ]
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, StageTypes)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if StageTypes.subclass:
            return StageTypes.subclass(*args_, **kwargs_)
        else:
            return StageTypes(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='StageTypes', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('StageTypes')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='StageTypes')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='StageTypes', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='StageTypes'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='StageTypes', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class StageTypes


class TableDefinitions(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('Record', 'Record', 1, 0, {'maxOccurs': 'unbounded', 'ref': 'Record', 'name': 'Record', 'type': 'Record'}, None),
    ]
    subclass = None
    superclass = None
    def __init__(self, Record=None):
        self.original_tagname_ = None
        if Record is None:
            self.Record = []
        else:
            self.Record = Record
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TableDefinitions)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TableDefinitions.subclass:
            return TableDefinitions.subclass(*args_, **kwargs_)
        else:
            return TableDefinitions(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Record(self): return self.Record
    def set_Record(self, Record): self.Record = Record
    def add_Record(self, value): self.Record.append(value)
    def insert_Record_at(self, index, value): self.Record.insert(index, value)
    def replace_Record_at(self, index, value): self.Record[index] = value
    def hasContent_(self):
        if (
            self.Record
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TableDefinitions', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TableDefinitions')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TableDefinitions')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TableDefinitions', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TableDefinitions'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TableDefinitions', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Record_ in self.Record:
            Record_.export(outfile, level, namespace_, name_='Record', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Record':
            obj_ = Record.factory()
            obj_.build(child_)
            self.Record.append(obj_)
            obj_.original_tagname_ = 'Record'
# end class TableDefinitions


class ParameterSets(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('Record', 'Record', 1, 0, {'maxOccurs': 'unbounded', 'ref': 'Record', 'name': 'Record', 'type': 'Record'}, None),
    ]
    subclass = None
    superclass = None
    def __init__(self, Record=None):
        self.original_tagname_ = None
        if Record is None:
            self.Record = []
        else:
            self.Record = Record
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ParameterSets)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ParameterSets.subclass:
            return ParameterSets.subclass(*args_, **kwargs_)
        else:
            return ParameterSets(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Record(self): return self.Record
    def set_Record(self, Record): self.Record = Record
    def add_Record(self, value): self.Record.append(value)
    def insert_Record_at(self, index, value): self.Record.insert(index, value)
    def replace_Record_at(self, index, value): self.Record[index] = value
    def hasContent_(self):
        if (
            self.Record
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ParameterSets', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ParameterSets')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ParameterSets')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ParameterSets', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ParameterSets'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ParameterSets', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Record_ in self.Record:
            Record_.export(outfile, level, namespace_, name_='Record', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Record':
            obj_ = Record.factory()
            obj_.build(child_)
            self.Record.append(obj_)
            obj_.original_tagname_ = 'Record'
# end class ParameterSets


class Record(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('DateModified', 'xs:date', 0, 1, {'use': 'optional'}),
        MemberSpec_('Identifier', 'xs:string', 0, 0, {'use': 'required'}),
        MemberSpec_('Readonly', 'xs:integer', 0, 0, {'use': 'required'}),
        MemberSpec_('TimeModified', 'xs:NMTOKEN', 0, 1, {'use': 'optional'}),
        MemberSpec_('Type', 'xs:NCName', 0, 0, {'use': 'required'}),
        MemberSpec_('Property', 'Property', 1, 0, {'ref': 'Property', 'name': 'Property', 'type': 'Property'}, 1),
        MemberSpec_('Collection', 'Collection', 1, 0, {'ref': 'Collection', 'name': 'Collection', 'type': 'Collection'}, 1),
    ]
    subclass = None
    superclass = None
    def __init__(self, DateModified=None, Identifier=None, Readonly=None, TimeModified=None, Type=None, Property=None, Collection=None):
        self.original_tagname_ = None
        if isinstance(DateModified, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DateModified, '%Y-%m-%d').date()
        else:
            initvalue_ = DateModified
        self.DateModified = initvalue_
        self.Identifier = _cast(None, Identifier)
        self.Readonly = _cast(int, Readonly)
        self.TimeModified = _cast(None, TimeModified)
        self.Type = _cast(None, Type)
        if Property is None:
            self.Property = []
        else:
            self.Property = Property
        if Collection is None:
            self.Collection = []
        else:
            self.Collection = Collection
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Record)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Record.subclass:
            return Record.subclass(*args_, **kwargs_)
        else:
            return Record(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Property(self): return self.Property
    def set_Property(self, Property): self.Property = Property
    def add_Property(self, value): self.Property.append(value)
    def insert_Property_at(self, index, value): self.Property.insert(index, value)
    def replace_Property_at(self, index, value): self.Property[index] = value
    def get_Collection(self): return self.Collection
    def set_Collection(self, Collection): self.Collection = Collection
    def add_Collection(self, value): self.Collection.append(value)
    def insert_Collection_at(self, index, value): self.Collection.insert(index, value)
    def replace_Collection_at(self, index, value): self.Collection[index] = value
    def get_DateModified(self): return self.DateModified
    def set_DateModified(self, DateModified): self.DateModified = DateModified
    def get_Identifier(self): return self.Identifier
    def set_Identifier(self, Identifier): self.Identifier = Identifier
    def get_Readonly(self): return self.Readonly
    def set_Readonly(self, Readonly): self.Readonly = Readonly
    def get_TimeModified(self): return self.TimeModified
    def set_TimeModified(self, TimeModified): self.TimeModified = TimeModified
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def hasContent_(self):
        if (
            self.Property or
            self.Collection
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Record', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Record')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Record')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='Record', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Record'):
        if self.DateModified is not None and 'DateModified' not in already_processed:
            already_processed.add('DateModified')
            outfile.write(' DateModified="%s"' % self.gds_format_date(self.DateModified, input_name='DateModified'))
        if self.Identifier is not None and 'Identifier' not in already_processed:
            already_processed.add('Identifier')
            outfile.write(' Identifier=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Identifier), input_name='Identifier')), ))
        if self.Readonly is not None and 'Readonly' not in already_processed:
            already_processed.add('Readonly')
            outfile.write(' Readonly="%s"' % self.gds_format_integer(self.Readonly, input_name='Readonly'))
        if self.TimeModified is not None and 'TimeModified' not in already_processed:
            already_processed.add('TimeModified')
            outfile.write(' TimeModified=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.TimeModified), input_name='TimeModified')), ))
        if self.Type is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            outfile.write(' Type=%s' % (quote_attrib(self.Type), ))
    def exportChildren(self, outfile, level, namespace_='', name_='Record', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Property_ in self.Property:
            Property_.export(outfile, level, namespace_, name_='Property', pretty_print=pretty_print)
        for Collection_ in self.Collection:
            Collection_.export(outfile, level, namespace_, name_='Collection', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('DateModified', node)
        if value is not None and 'DateModified' not in already_processed:
            already_processed.add('DateModified')
            try:
                self.DateModified = self.gds_parse_date(value)
            except ValueError as exp:
                raise ValueError('Bad date attribute (DateModified): %s' % exp)
        value = find_attr_value_('Identifier', node)
        if value is not None and 'Identifier' not in already_processed:
            already_processed.add('Identifier')
            self.Identifier = value
        value = find_attr_value_('Readonly', node)
        if value is not None and 'Readonly' not in already_processed:
            already_processed.add('Readonly')
            try:
                self.Readonly = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('TimeModified', node)
        if value is not None and 'TimeModified' not in already_processed:
            already_processed.add('TimeModified')
            self.TimeModified = value
        value = find_attr_value_('Type', node)
        if value is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            self.Type = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Property':
            obj_ = Property.factory()
            obj_.build(child_)
            self.Property.append(obj_)
            obj_.original_tagname_ = 'Property'
        elif nodeName_ == 'Collection':
            obj_ = Collection.factory()
            obj_.build(child_)
            self.Collection.append(obj_)
            obj_.original_tagname_ = 'Collection'
# end class Record


class Collection(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('Name', 'xs:NCName', 0, 0, {'use': 'required'}),
        MemberSpec_('Type', 'xs:NCName', 0, 0, {'use': 'required'}),
        MemberSpec_('SubRecord', 'SubRecord', 1, 0, {'maxOccurs': 'unbounded', 'ref': 'SubRecord', 'name': 'SubRecord', 'type': 'SubRecord'}, None),
    ]
    subclass = None
    superclass = None
    def __init__(self, Name=None, Type=None, SubRecord=None):
        self.original_tagname_ = None
        self.Name = _cast(None, Name)
        self.Type = _cast(None, Type)
        if SubRecord is None:
            self.SubRecord = []
        else:
            self.SubRecord = SubRecord
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Collection)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Collection.subclass:
            return Collection.subclass(*args_, **kwargs_)
        else:
            return Collection(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SubRecord(self): return self.SubRecord
    def set_SubRecord(self, SubRecord): self.SubRecord = SubRecord
    def add_SubRecord(self, value): self.SubRecord.append(value)
    def insert_SubRecord_at(self, index, value): self.SubRecord.insert(index, value)
    def replace_SubRecord_at(self, index, value): self.SubRecord[index] = value
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def hasContent_(self):
        if (
            self.SubRecord
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Collection', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Collection')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Collection')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='Collection', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Collection'):
        if self.Name is not None and 'Name' not in already_processed:
            already_processed.add('Name')
            outfile.write(' Name=%s' % (quote_attrib(self.Name), ))
        if self.Type is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            outfile.write(' Type=%s' % (quote_attrib(self.Type), ))
    def exportChildren(self, outfile, level, namespace_='', name_='Collection', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for SubRecord_ in self.SubRecord:
            SubRecord_.export(outfile, level, namespace_, name_='SubRecord', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Name', node)
        if value is not None and 'Name' not in already_processed:
            already_processed.add('Name')
            self.Name = value
        value = find_attr_value_('Type', node)
        if value is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            self.Type = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SubRecord':
            obj_ = SubRecord.factory()
            obj_.build(child_)
            self.SubRecord.append(obj_)
            obj_.original_tagname_ = 'SubRecord'
# end class Collection


class SubRecord(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('Property', 'Property', 1, 0, {'maxOccurs': 'unbounded', 'ref': 'Property', 'name': 'Property', 'type': 'Property'}, None),
    ]
    subclass = None
    superclass = None
    def __init__(self, Property=None):
        self.original_tagname_ = None
        if Property is None:
            self.Property = []
        else:
            self.Property = Property
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SubRecord)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SubRecord.subclass:
            return SubRecord.subclass(*args_, **kwargs_)
        else:
            return SubRecord(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Property(self): return self.Property
    def set_Property(self, Property): self.Property = Property
    def add_Property(self, value): self.Property.append(value)
    def insert_Property_at(self, index, value): self.Property.insert(index, value)
    def replace_Property_at(self, index, value): self.Property[index] = value
    def hasContent_(self):
        if (
            self.Property
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SubRecord', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SubRecord')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SubRecord')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SubRecord', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SubRecord'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SubRecord', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Property_ in self.Property:
            Property_.export(outfile, level, namespace_, name_='Property', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Property':
            obj_ = Property.factory()
            obj_.build(child_)
            self.Property.append(obj_)
            obj_.original_tagname_ = 'Property'
# end class SubRecord


class Property(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('Name', 'xs:NCName', 0, 0, {'use': 'required'}),
        MemberSpec_('PreFormatted', 'xs:integer', 0, 1, {'use': 'optional'}),
        MemberSpec_('valueOf_', [], 0),
    ]
    subclass = None
    superclass = None
    def __init__(self, Name=None, PreFormatted=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        self.Name = _cast(None, Name)
        self.PreFormatted = _cast(int, PreFormatted)
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Property)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Property.subclass:
            return Property.subclass(*args_, **kwargs_)
        else:
            return Property(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_PreFormatted(self): return self.PreFormatted
    def set_PreFormatted(self, PreFormatted): self.PreFormatted = PreFormatted
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Property', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Property')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Property')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Property'):
        if self.Name is not None and 'Name' not in already_processed:
            already_processed.add('Name')
            outfile.write(' Name=%s' % (quote_attrib(self.Name), ))
        if self.PreFormatted is not None and 'PreFormatted' not in already_processed:
            already_processed.add('PreFormatted')
            outfile.write(' PreFormatted="%s"' % self.gds_format_integer(self.PreFormatted, input_name='PreFormatted'))
    def exportChildren(self, outfile, level, namespace_='', name_='Property', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Name', node)
        if value is not None and 'Name' not in already_processed:
            already_processed.add('Name')
            self.Name = value
        value = find_attr_value_('PreFormatted', node)
        if value is not None and 'PreFormatted' not in already_processed:
            already_processed.add('PreFormatted')
            try:
                self.PreFormatted = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
        pass
# end class Property


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'DSExport'
        rootClass = DSExport
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'DSExport'
        rootClass = DSExport
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'DSExport'
        rootClass = DSExport
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'DSExport'
        rootClass = DSExport
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:

        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "Collection",
    "DSExport",
    "Header",
    "Job",
    "ParameterSets",
    "Property",
    "Record",
    "StageTypes",
    "SubRecord",
    "TableDefinitions"
]
